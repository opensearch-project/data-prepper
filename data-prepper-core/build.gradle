/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'data-prepper.publish'
}

sourceSets {
    main {
        resources {
            srcDirs += "../shared-config"
        }
    }
}

group = 'org.opensearch.dataprepper.core'

dependencies {
    implementation project(':data-prepper-api')
    implementation project(':data-prepper-expression')
    implementation project(':data-prepper-event')
    implementation project(':data-prepper-plugins:blocking-buffer')
    implementation project(':data-prepper-plugins:common')
    implementation project(':data-prepper-logstash-configuration')
    implementation project(':data-prepper-pipeline-parser')
    implementation project(':data-prepper-plugin-framework')
    testImplementation project(':data-prepper-plugin-framework').sourceSets.test.output
    testImplementation project(':data-prepper-plugins:common').sourceSets.test.output
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    implementation libs.reflections.core
    implementation 'io.micrometer:micrometer-core'
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-registry-cloudwatch2'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    implementation 'software.amazon.awssdk:cloudwatch'
    implementation platform('org.apache.logging.log4j:log4j-bom:2.23.1')
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl'
    implementation 'javax.inject:javax.inject:1'
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation(libs.spring.core) {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation(libs.spring.context) {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation 'software.amazon.cloudwatchlogs:aws-embedded-metrics:2.0.0-beta-1'
    testImplementation testLibs.spring.test
    implementation libs.armeria.core
    implementation libs.armeria.grpc
    implementation libs.commons.lang3
    implementation 'software.amazon.awssdk:acm'
    implementation 'software.amazon.awssdk:s3'
    implementation 'software.amazon.awssdk:apache-client'
    implementation 'commons-validator:commons-validator:1.8.0'
    implementation 'software.amazon.awssdk:servicediscovery'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    testImplementation testLibs.junit.vintage
    testImplementation libs.commons.lang3
    testImplementation project(':data-prepper-test-event')
    testImplementation project(':data-prepper-test-common')
    testImplementation project(':data-prepper-api').sourceSets.test.output
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs

    useJUnitPlatform()

    classpath = sourceSets.integrationTest.runtimeClasspath

    filter {
        includeTestsMatching '*IT'
    }
}

check.dependsOn integrationTest

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule { //in addition to core projects rule
            limit {
                // temporarily lowering this to unblock the release.
                // some builds pass with 0.9 coverage, some fail with 0.89
                minimum = 0.89
            }
        }
    }
}

