/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'antlr'
    id 'idea'
    id 'data-prepper.publish'
}

group = 'org.opensearch.dataprepper.core'

ext {
    antlrGeneratedPackageDirectory = "org/opensearch/dataprepper/expression/antlr/"
}

dependencies {
    antlr('org.antlr:antlr4:4.10.1') {
        exclude group: 'org.glassfish', module: 'javax.json'
    }
    implementation project(':data-prepper-api')
    implementation 'javax.inject:javax.inject:1'
    implementation(libs.spring.core) {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation(libs.spring.context) {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    implementation platform('org.apache.logging.log4j:log4j-bom:2.25.1')
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl'
    implementation 'com.github.seancfoley:ipaddress:5.5.1'
    testImplementation testLibs.spring.test
    testImplementation libs.commons.lang3
    testImplementation 'com.fasterxml.jackson.core:jackson-databind'
}

generateGrammarSource {
    outputDirectory = new File("build/generated-src/antlr/main/${antlrGeneratedPackageDirectory}")
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule { //in addition to core projects rule - this one checks for 100% code coverage for this project
            limit {
                minimum = 1.0 // keep at 100%
            }
        }
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["${antlrGeneratedPackageDirectory}/**"])
        }))
    }
}

tasks.named('sourcesJar').configure {
    dependsOn 'generateGrammarSource'
}