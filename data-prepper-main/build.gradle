/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

plugins {
    id 'data-prepper.publish'
    id 'com.google.cloud.tools.jib' version '3.4.5'
}

sourceSets {
    main {
        resources {
            srcDirs += "../shared-config"
        }
    }
}

group = 'org.opensearch.dataprepper.core'

dependencies {
    implementation project(':data-prepper-core')
    implementation project(':data-prepper-plugins')
    implementation project(':data-prepper-logstash-configuration')
    implementation(libs.spring.context) {
        exclude group: 'commons-logging', module: 'commons-logging'
    }
    testImplementation libs.commons.io
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Main-Class': 'org.opensearch.dataprepper.DataPrepperExecute')
    }
}

configurations {
  allDependencyJars {
      canBeConsumed = true
      canBeResolved = true
      extendsFrom runtimeClasspath
  }
}

artifacts {
    /**
     * Shares a configuration which has all the necessary dependencies and can be used
     * as part of the release to load all dependencies.
     * https://docs.gradle.org/current/userguide/cross_project_publications.html
     */
    allDependencyJars(jar)
}


jib {
    from {
        image = 'amazoncorretto:21-al2023'
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }

    }
    to {
        image = "${project.rootProject.name}:${project.version}"
    }
    container {
        mainClass = 'org.opensearch.dataprepper.DataPrepperExecute'
        environment = [
                'ENV_CONFIG_FILEPATH': '/usr/share/data-prepper/config/data-prepper-config.yaml',
                'ENV_PIPELINE_FILEPATH': '/usr/share/data-prepper/pipelines/pipelines.yaml'
        ]
        // jvmFlags = ['-Xms512m', '-Xmx1024m']
        // ports = ['8080']
    }
}