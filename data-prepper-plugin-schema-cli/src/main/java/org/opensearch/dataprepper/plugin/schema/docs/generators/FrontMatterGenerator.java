package org.opensearch.dataprepper.plugin.schema.docs.generators;

import com.fasterxml.jackson.databind.JsonNode;
import org.opensearch.dataprepper.plugin.schema.docs.model.PluginTypeForDocGen;

/**
 * Generates Jekyll front matter for plugin documentation.
 */
public class FrontMatterGenerator {

    /**
     * Generate Jekyll front matter for a plugin's documentation.
     *
     * @param pluginTypeForDocGen The type of plugin
     * @param pluginName The name of the plugin
     * @param schema The JSON schema containing metadata
     * @return Generated front matter
     */
    public String generate(final PluginTypeForDocGen pluginTypeForDocGen, final String pluginName, final JsonNode schema) {
        final StringBuilder frontMatter = new StringBuilder();
        frontMatter.append("---\n");
        frontMatter.append("layout: default\n");
        frontMatter.append("title: ").append(toTitleCase(pluginName.replaceAll("_", " "))).append("\n");
        frontMatter.append("parent: ").append(capitalize(pluginTypeForDocGen.name())).append("s\n");
        frontMatter.append("grand_parent: Pipelines\n");
        frontMatter.append("nav_order: ").append(calculateNavOrder(pluginName)).append("\n");
        frontMatter.append("---\n\n");

        // Add auto-generated comment with metadata
        frontMatter.append("<!--\n");
        frontMatter.append("This table is autogenerated. Do not edit it.\n");
        frontMatter.append("- name: ").append(pluginName.toLowerCase()).append("\n");
        frontMatter.append("- pluginType: ").append(pluginTypeForDocGen.name().toLowerCase()).append("\n");
        if (schema.has("$id")) {
            frontMatter.append("- source: ").append(schema.get("$id").asText()).append("\n");
        }
        frontMatter.append("-->\n\n");

        return frontMatter.toString();
    }

    private String capitalize(final String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }
        return str.substring(0, 1).toUpperCase() + str.substring(1).toLowerCase();
    }

    private int calculateNavOrder(final String pluginName) {
        // Simple alphabetical ordering
        return pluginName.toLowerCase().charAt(0) - 'a' + 1;
    }

    private String toTitleCase(final String str) {
        if (str == null || str.isEmpty()) {
            return str;
        }

        StringBuilder titleCase = new StringBuilder();
        boolean nextTitleCase = true;

        for (char c : str.toLowerCase().toCharArray()) {
            if (Character.isSpaceChar(c) || c == '-' || c == '_') {
                nextTitleCase = true;
            } else if (nextTitleCase) {
                c = Character.toTitleCase(c);
                nextTitleCase = false;
            }
            titleCase.append(c);
        }

        return titleCase.toString();
    }
}