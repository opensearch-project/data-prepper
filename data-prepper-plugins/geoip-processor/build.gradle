/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

plugins{
    id 'de.undercouch.download' version '5.5.0'
}
apply plugin: 'de.undercouch.download'

import de.undercouch.gradle.tasks.download.Download

dependencies {
    implementation project(':data-prepper-api')
    implementation project(path: ':data-prepper-plugins:common')
    implementation 'io.micrometer:micrometer-core'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation libs.commons.compress
    implementation libs.commons.io
    implementation 'software.amazon.awssdk:sts'
    implementation 'software.amazon.awssdk:s3'
    implementation 'com.maxmind.geoip2:geoip2:4.2.0'
    implementation 'com.maxmind.db:maxmind-db:3.1.0'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    implementation libs.commons.lang3
    implementation libs.armeria.core

    testImplementation project(':data-prepper-core')
    testImplementation project(':data-prepper-event')
    testImplementation project(':data-prepper-plugin-framework')
    testImplementation project(':data-prepper-pipeline-parser')
    testImplementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    testImplementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml'
    testImplementation project(':data-prepper-test-common')
}

def downloadFiles = tasks.register('downloadFiles')

def databaseNames = [
        'GeoLite2-City-Test',
        'GeoLite2-Country-Test',
        'GeoLite2-ASN-Test'
]

databaseNames.forEach { databaseName -> {

    def url =  "https://raw.githubusercontent.com/maxmind/MaxMind-DB/main/test-data/${databaseName}.mmdb"
    def gradleName = databaseName.replaceAll('-', '')
    def downloadTask = tasks.register("download${gradleName}", Download) {
        src(url)
        dest "${project.layout.buildDirectory.get()}/resources/test/mmdb-files/geo-lite2/${databaseName}.mmdb"
        overwrite true
    }
    downloadFiles.get().dependsOn downloadTask
}}

def enterpriseDatabaseNames = [
        'GeoIP2-Enterprise-Test'
]

enterpriseDatabaseNames.forEach { enterpriseDatabaseName -> {

    def url =  "https://raw.githubusercontent.com/maxmind/MaxMind-DB/main/test-data/${enterpriseDatabaseName}.mmdb"
    def gradleName = enterpriseDatabaseName.replaceAll('-', '')
    def downloadEnterpriseTask = tasks.register("download${gradleName}", Download) {
        src(url)
        dest "${project.layout.buildDirectory.get()}/resources/test/mmdb-files/geo-ip2/${enterpriseDatabaseName}.mmdb"
        overwrite true
    }
    downloadFiles.get().dependsOn downloadEnterpriseTask
}}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs

    useJUnitPlatform()

    classpath = sourceSets.integrationTest.runtimeClasspath

    systemProperty 'data-prepper.dir', project.layout.buildDirectory.get().getAsFile().absolutePath

    filter {
        includeTestsMatching '*IT'
    }
}


test {
    useJUnitPlatform()
    dependsOn(downloadFiles)

    systemProperty 'data-prepper.dir', project.layout.buildDirectory.get().getAsFile().absolutePath
}

checkstyleTest {
    dependsOn(downloadFiles)
}

compileIntegrationTestJava.dependsOn downloadFiles

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.84
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
check.dependsOn integrationTest