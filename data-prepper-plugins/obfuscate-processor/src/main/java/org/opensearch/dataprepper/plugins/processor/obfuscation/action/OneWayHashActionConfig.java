/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

package org.opensearch.dataprepper.plugins.processor.obfuscation.action;

import com.fasterxml.jackson.annotation.JsonClassDescription;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import org.opensearch.dataprepper.model.event.EventKeyConfiguration;
import org.opensearch.dataprepper.model.event.EventKeyFactory;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyDescription;

import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;

import org.opensearch.dataprepper.model.event.EventKey;

@JsonClassDescription("Obfuscates data by performing a one-way hash.")
@JsonPropertyOrder
public class OneWayHashActionConfig {

    @JsonProperty("salt")
    @JsonPropertyDescription("Salt value to use when generating hash. If not specified, salt will be randomly generated by the processor.")    
    @Size(min = 16, message = "Minimum size of salt string is 16.")
    @Size(max = 64, message = "Maximum size of salt string is 64")
    private String salt;

    @JsonProperty("salt_key")
    @JsonPropertyDescription("A key to compute salt based on a value provided as part of a record. " +
            "If key or value was not found in the event, a salt defined in the pipeline configuration will be used instead.")
    @EventKeyConfiguration(EventKeyFactory.EventAction.GET)
    private EventKey saltKey;

    @JsonProperty("format")
    @Pattern(regexp = "SHA-512", message = "Valid values: <code>SHA-512</code>")
    @JsonPropertyDescription("Format of one way hash to generate. Default to <code>SHA-512</code>.")
    private String format = "SHA-512";

    public OneWayHashActionConfig(){

    }

    public String getSalt () {
        return salt;
    }

    public String getFormat() {
        return format;
    }

    public EventKey getSaltKey() {
        return saltKey;
    }

}

