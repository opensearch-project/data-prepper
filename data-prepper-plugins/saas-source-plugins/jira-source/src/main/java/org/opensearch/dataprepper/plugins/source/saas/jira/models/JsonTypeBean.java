/*
 * The Jira Cloud platform REST API
 * Jira Cloud platform REST API documentation
 *
 * OpenAPI spec version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package org.opensearch.dataprepper.plugins.source.saas.jira.models;

import com.fasterxml.jackson.annotation.JsonProperty;
import org.opensearch.dataprepper.plugins.source.saas.jira.utils.Constants;

import java.util.Map;
import java.util.Objects;

import static org.opensearch.dataprepper.plugins.source.saas.jira.utils.Constants.CLOSING_BRACKET;
import static org.opensearch.dataprepper.plugins.source.saas.jira.utils.Constants.CUSTOM;
import static org.opensearch.dataprepper.plugins.source.saas.jira.utils.Constants.CUSTOM_ID;
import static org.opensearch.dataprepper.plugins.source.saas.jira.utils.Constants.ITEMS_WITH_SPACE;
import static org.opensearch.dataprepper.plugins.source.saas.jira.utils.Constants.NEW_LINE;
import static org.opensearch.dataprepper.plugins.source.saas.jira.utils.Constants.TYPE_WITH_SPACE;
import static org.opensearch.dataprepper.plugins.source.saas.jira.utils.Constants._CONFIG;
import static org.opensearch.dataprepper.plugins.source.saas.jira.utils.Constants._SYSTEM;

/**
 * The schema of a field.
 */
public class JsonTypeBean {
  @JsonProperty("type")
  private String type = null;

  @JsonProperty("items")
  private String items = null;

  @JsonProperty("system")
  private String system = null;

  @JsonProperty("custom")
  private String custom = null;

  @JsonProperty("customId")
  private Long customId = null;

  @JsonProperty("configuration")
  private Map<String, Object> configuration = null;

  /**
   * The data type of the field.
   *
   * @return type type
   */
  public String getType() {
    return type;
  }

  /**
   * When the data type is an array, the name of the field items within the array.
   *
   * @return items items
   */
  public String getItems() {
    return items;
  }

  /**
   * If the field is a system field, the name of the field.
   *
   * @return system system
   */
  public String getSystem() {
    return system;
  }

  /**
   * If the field is a custom field, the URI of the field.
   *
   * @return custom custom
   */
  public String getCustom() {
    return custom;
  }

  /**
   * If the field is a custom field, the custom ID of the field.
   *
   * @return customId custom id
   */
  public Long getCustomId() {
    return customId;
  }

  /**
   * If the field is a custom field, the configuration of the field.
   *
   * @return _configuration configuration
   */
  public Map<String, Object> getConfiguration() {
    return configuration;
  }

  @Override
  public boolean equals(Object o) {
    if (this
        == o) {
      return true;
    }
    if (Objects.isNull(o) || getClass() != o.getClass()) {
      return false;
    }
    JsonTypeBean jsonTypeBean = (JsonTypeBean) o;
    return Objects.equals(this.type, jsonTypeBean.type)
        && Objects.equals(this.items, jsonTypeBean.items)
        && Objects.equals(this.system, jsonTypeBean.system)
        && Objects.equals(this.custom, jsonTypeBean.custom)
        && Objects.equals(this.customId, jsonTypeBean.customId)
        && Objects.equals(this.configuration, jsonTypeBean.configuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, items, system, custom, customId, configuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append(Constants.JSON_TYPE_BEAN);

    sb.append(TYPE_WITH_SPACE).append(toIndentedString(type)).append(NEW_LINE);
    sb.append(ITEMS_WITH_SPACE).append(toIndentedString(items)).append(NEW_LINE);
    sb.append(_SYSTEM).append(toIndentedString(system)).append(NEW_LINE);
    sb.append(CUSTOM).append(toIndentedString(custom)).append(NEW_LINE);
    sb.append(CUSTOM_ID).append(toIndentedString(customId)).append(NEW_LINE);
    sb.append(_CONFIG).append(toIndentedString(configuration)).append(NEW_LINE);
    sb.append(CLOSING_BRACKET);
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first
   * line).
   */
  private String toIndentedString(Object o) {
    if (Objects.isNull(o)) {
      return Constants.PRINT_NULL;
    }
    return o.toString().replace(NEW_LINE, Constants.NEW_LINE_WITH_SPACE);
  }
}
