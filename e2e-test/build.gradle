/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import com.bmuschko.gradle.docker.tasks.network.DockerCreateNetwork
import com.bmuschko.gradle.docker.tasks.network.DockerRemoveNetwork
import org.opensearch.dataprepper.gradle.end_to_end.DockerProviderTask

plugins {
    id 'com.bmuschko.docker-remote-api' version '9.4.0'
}


subprojects {
    apply plugin: 'com.bmuschko.docker-remote-api'

    ext {
        dataPrepperJarImageFilepath = 'bin/data-prepper/'
        targetJavaVersion = project.hasProperty('endToEndJavaVersion') ? project.getProperty('endToEndJavaVersion') : 'docker'
        targetOpenTelemetryVersion = project.hasProperty('openTelemetryVersion') ? project.getProperty('openTelemetryVersion') : "${libs.versions.opentelemetry.get()}"
        dataPrepperBaseImage = "eclipse-temurin:${targetJavaVersion}-jre"
    }

    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integrationTest/java')
            }
            resources.srcDir file('src/integrationTest/resources')
        }
    }

    tasks.named('processIntegrationTestResources') {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    configurations {
        integrationTestImplementation.extendsFrom testImplementation
        integrationTestRuntime.extendsFrom testRuntime
    }

    tasks.register('copyDataPrepperArchive', Copy) {
        dependsOn ':release:archives:linux:linuxx64DistTar'
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from project(':release:archives:linux').tasks.getByName('linuxx64DistTar').archiveFile.get().asFile
        into("${project.buildDir}/docker/")
    }

    tasks.register('createDataPrepperDockerFile', Dockerfile) {
        dependsOn copyDataPrepperArchive
        dependsOn ':release:archives:linux:linuxx64DistTar'
        destFile = project.file('build/docker/Dockerfile')

        from(dataPrepperBaseImage)
        runCommand('mkdir -p /var/log/data-prepper')
        addFile(project(':release:archives:linux').tasks.getByName('linuxx64DistTar').archiveFileName.get(), '/usr/share')
        runCommand("mv /usr/share/${project(':release:archives:linux').tasks.getByName('linuxx64DistTar').archiveFileName.get().replace('.tar.gz', '')} /usr/share/data-prepper")
        workingDir('/usr/share/data-prepper')
        defaultCommand('bin/data-prepper')
    }

    tasks.register('buildDataPrepperDockerImage', DockerBuildImage) {
        dependsOn createDataPrepperDockerFile
        dockerFile = file('build/docker/Dockerfile')
        images.add('e2e-test-data-prepper')
    }


    tasks.register('dataPrepperDockerImage', DockerProviderTask) {
        if(targetJavaVersion == 'docker') {
            dependsOn ':release:docker:docker'
            imageId = "${project.rootProject.name}:${project.version}"
        }
        else {
            dependsOn 'createDataPrepperDockerFile'
            imageId = buildDataPrepperDockerImage.getImageId()
        }
    }

    tasks.register('createDataPrepperNetwork', DockerCreateNetwork) {
        networkName = 'data_prepper_network'
    }

    tasks.register('removeDataPrepperNetwork', DockerRemoveNetwork) {
        dependsOn createDataPrepperNetwork
        networkId = createDataPrepperNetwork.getNetworkId()
    }

    /**
     * OpenSearch Docker tasks
     */
    tasks.register('pullOpenSearchDockerImage', DockerPullImage) {
        image = "opensearchproject/opensearch:${libs.versions.opensearch.get()}"
    }

    tasks.register('createOpenSearchDockerContainer', DockerCreateContainer) {
        dependsOn createDataPrepperNetwork
        dependsOn pullOpenSearchDockerImage
        targetImageId pullOpenSearchDockerImage.image
        containerName = 'node-0.example.com'
        hostConfig.portBindings = ['9200:9200', '9600:9600']
        hostConfig.autoRemove = true
        hostConfig.network = createDataPrepperNetwork.getNetworkName()
        envVars = ['discovery.type': 'single-node']
    }

    tasks.register('startOpenSearchDockerContainer', DockerStartContainer) {
        dependsOn createOpenSearchDockerContainer
        targetContainerId createOpenSearchDockerContainer.getContainerId()

        doLast {
            sleep(90 * 1000)
        }
    }

    tasks.register('stopOpenSearchDockerContainer', DockerStopContainer) {
        targetContainerId createOpenSearchDockerContainer.getContainerId()

        doLast {
            sleep(5 * 1000)
        }
    }

    dependencies {
        testImplementation testLibs.junit.vintage
    }
}
