/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer

/**
 * Represents the configurations needed for any end-to-end log test.
 */
class LogTestConfiguration {
    LogTestConfiguration(
            String testName,
            String description,
            String testFilters,
            String containerName,
            String pipelineConfiguration,
            String dataPrepperConfiguration) {
        this.testName = testName
        this.description = description
        this.testFilters = testFilters
        this.containerName = containerName
        this.pipelineConfiguration = pipelineConfiguration
        this.dataPrepperConfiguration = dataPrepperConfiguration
    }
    String testName
    String description
    String testFilters
    String containerName
    String pipelineConfiguration
    String dataPrepperConfiguration
}

List<LogTestConfiguration> logTestConfigurations = [
        new LogTestConfiguration(
                'basicLogEndToEndTest',
                'Runs the basic grok end-to-end test.',
                'org.opensearch.dataprepper.integration.log.EndToEndBasicLogTest.testPipelineEndToEnd*',
                'data-prepper-basic-log',
                'basic-grok-e2e-pipeline.yml',
                'data_prepper.yml'
        ),
        new LogTestConfiguration(
                'basicLogEndToEndTestWithDatePatternedIndex',
                'Runs the basic grok end-to-end test against an index with a date pattern.',
                'org.opensearch.dataprepper.integration.log.EndToEndBasicLogTest.testPipelineWithDatePatternedIndexEndToEnd*',
                'data-prepper-basic-log-with-date-patterned-index',
                'basic-grok-e2e-pipeline-date-pattern-index.yml',
                'data_prepper.yml'
        ),
        new LogTestConfiguration(
                'basicLogWithAwsSecretsEndToEndTest',
                'Runs the basic grok with AWS secrets end-to-end test.',
                'org.opensearch.dataprepper.integration.log.EndToEndBasicLogTest.testPipelineEndToEnd*',
                'data-prepper-basic-log-with-aws-secrets',
                'basic-grok-e2e-pipeline-with-aws-secrets.yml',
                'data_prepper.yml'
        ),
        new LogTestConfiguration(
                'parallelGrokStringSubstituteTest',
                'Runs the parallel grok and string substitute end-to-end test.',
                'org.opensearch.dataprepper.integration.log.ParallelGrokStringSubstituteLogTest.testPipelineEndToEnd*',
                'data-prepper-parallel-log',
                'parallel-grok-substitute-e2e-pipeline.yml',
                'data_prepper.yml'
        )
]


logTestConfigurations.each { testConfiguration ->
    tasks.register("create${testConfiguration.testName}", DockerCreateContainer) {
        dependsOn dataPrepperDockerImage
        dependsOn createDataPrepperNetwork
        containerName = testConfiguration.containerName
        exposePorts('tcp', [2021, 4900])
        hostConfig.portBindings = ['2021:2021', '4900:4900']
        hostConfig.binds = [
                "${System.getProperty('user.home')}/.aws" : '/root/.aws',
                (project.file("src/integrationTest/resources/${testConfiguration.pipelineConfiguration}").toString())   : '/usr/share/data-prepper/pipelines/log-pipeline.yaml',
                (project.file("src/integrationTest/resources/${testConfiguration.dataPrepperConfiguration}").toString()): '/usr/share/data-prepper/config/data-prepper-config.yaml'
        ]
        envVars = [
                'AWS_PROFILE' : System.getenv('AWS_PROFILE') ?: ''
        ]
        hostConfig.network = createDataPrepperNetwork.getNetworkName()
        targetImageId dataPrepperDockerImage.imageId
    }

    tasks.register("start${testConfiguration.testName}", DockerStartContainer) {
        dependsOn "create${testConfiguration.testName}"
        dependsOn 'startOpenSearchDockerContainer'
        mustRunAfter 'startOpenSearchDockerContainer'
        targetContainerId tasks.getByName("create${testConfiguration.testName}").getContainerId()
    }

    tasks.register("stop${testConfiguration.testName}", DockerStopContainer) {
        dependsOn "${testConfiguration.testName}"
        targetContainerId tasks.getByName("create${testConfiguration.testName}").getContainerId()
    }

    tasks.register("remove${testConfiguration.testName}", DockerRemoveContainer) {
        dependsOn "stop${testConfiguration.testName}"
        targetContainerId tasks.getByName("stop${testConfiguration.testName}").getContainerId()
    }

    tasks.register(testConfiguration.testName, Test) {
        dependsOn build
        dependsOn startOpenSearchDockerContainer
        dependsOn "start${testConfiguration.testName}"

        // Wait for Data Prepper image to be ready
        doFirst {
            sleep(15 * 1000)
        }

        description = testConfiguration.description
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        filter {
            includeTestsMatching testConfiguration.testFilters
        }

        finalizedBy stopOpenSearchDockerContainer
        finalizedBy "remove${testConfiguration.testName}"
        finalizedBy removeDataPrepperNetwork
    }
}

dependencies {
    integrationTestImplementation project(':data-prepper-api')
    integrationTestImplementation project(':data-prepper-plugins:common')
    integrationTestImplementation project(':data-prepper-plugins:log-generator-source')
    integrationTestImplementation project(':data-prepper-plugins:opensearch')
    integrationTestImplementation project(':data-prepper-plugins:aws-plugin-api')
    integrationTestImplementation libs.armeria.core
    integrationTestImplementation testLibs.awaitility
    integrationTestImplementation libs.opensearch.rhlc
}
