/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */


import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage
import org.opensearch.dataprepper.gradle.end_to_end.DockerProviderTask

/**
 * Represents a configuration for a trace test container.
 */
class TraceTestContainerConfiguration {
    TraceTestContainerConfiguration(
            TaskProvider imageTask,
            String pipelineConfiguration,
            String dataPrepperConfiguration) {
        this.imageTask = imageTask
        this.pipelineConfiguration = pipelineConfiguration
        this.dataPrepperConfiguration = dataPrepperConfiguration
    }
    TaskProvider imageTask
    String pipelineConfiguration
    String dataPrepperConfiguration
}

/**
 * Represents the configurations needed for any end-to-end trace test.
 */
class TraceTestConfiguration {
    TraceTestConfiguration(
            String testName,
            String description,
            String testFilters,
            List<TraceTestContainerConfiguration> containerConfigurations,
            String containerNamePrefix) {
        this.testName = testName
        this.description = description
        this.testFilters = testFilters
        this.containerConfigurations = containerConfigurations
        this.containerNamePrefix = containerNamePrefix
    }
    String testName
    String description
    String testFilters
    List<TraceTestContainerConfiguration> containerConfigurations
    String containerNamePrefix
}

def RAW_SPAN_PIPELINE_YAML = 'raw-span-e2e-pipeline.yml'
def DATA_PREPPER_CONFIG_YAML = 'data_prepper.yml'
def RAW_SPAN_TESTS_PATTERN = 'org.opensearch.dataprepper.integration.trace.EndToEndRawSpanTest.testPipelineEndToEnd*'
def DATA_PREPPER_CONFIG_STATIC_YAML = 'data_prepper_static.yml'
def RELEASED_DATA_PREPPER_DOCKER_IMAGE = 'opensearchproject/data-prepper:latest'


tasks.register('pullLatestDataPrepperDockerImage', DockerPullImage) {
    image = RELEASED_DATA_PREPPER_DOCKER_IMAGE
}

tasks.register('latestDataPrepperDockerImage', DockerProviderTask) {
    dependsOn 'pullLatestDataPrepperDockerImage'
    imageId = RELEASED_DATA_PREPPER_DOCKER_IMAGE
}


List<TraceTestConfiguration> traceTestConfigurations = [
        new TraceTestConfiguration(
                'rawSpanEndToEndTest',
                'Runs the raw span integration tests.',
                RAW_SPAN_TESTS_PATTERN,
                [new TraceTestContainerConfiguration(
                        tasks.named('dataPrepperDockerImage'),
                        RAW_SPAN_PIPELINE_YAML,
                        DATA_PREPPER_CONFIG_YAML),
                 new TraceTestContainerConfiguration(
                         tasks.named('dataPrepperDockerImage'),
                         RAW_SPAN_PIPELINE_YAML,
                         DATA_PREPPER_CONFIG_YAML)],
                'data-prepper-raw',
        ),
        new TraceTestConfiguration(
                'rawSpanPeerForwarderEndToEndTest',
                'Runs the raw span with peer-forwarder integration tests.',
                RAW_SPAN_TESTS_PATTERN,
                [new TraceTestContainerConfiguration(
                        tasks.named('dataPrepperDockerImage'),
                        RAW_SPAN_PIPELINE_YAML,
                        DATA_PREPPER_CONFIG_STATIC_YAML),
                 new TraceTestContainerConfiguration(
                         tasks.named('dataPrepperDockerImage'),
                         RAW_SPAN_PIPELINE_YAML,
                         DATA_PREPPER_CONFIG_STATIC_YAML)],
                'data-prepper'
        ),
        new TraceTestConfiguration(
                'rawSpanLatestReleaseCompatibilityEndToEndTest',
                'Runs the raw span integration tests with the latest released Data Prepper as a peer.',
                RAW_SPAN_TESTS_PATTERN,
                [new TraceTestContainerConfiguration(
                        tasks.named('dataPrepperDockerImage'),
                        'raw-span-e2e-pipeline-from-build.yml',
                        DATA_PREPPER_CONFIG_STATIC_YAML),
                 new TraceTestContainerConfiguration(
                         tasks.named('latestDataPrepperDockerImage'),
                         'raw-span-e2e-pipeline-latest-release.yml',
                         DATA_PREPPER_CONFIG_STATIC_YAML)
                ],
                'data-prepper'
        ),
        new TraceTestConfiguration(
                'serviceMapPeerForwarderEndToEndTest',
                'Runs the service map with peer-forwarder integration tests.',
                'org.opensearch.dataprepper.integration.trace.EndToEndServiceMapTest.testPipelineEndToEnd*',
                [new TraceTestContainerConfiguration(
                        tasks.named('dataPrepperDockerImage'),
                        'service-map-e2e-pipeline.yml',
                        DATA_PREPPER_CONFIG_STATIC_YAML),
                 new TraceTestContainerConfiguration(
                         tasks.named('dataPrepperDockerImage'),
                         'service-map-e2e-pipeline.yml',
                         DATA_PREPPER_CONFIG_STATIC_YAML)],
                'data-prepper'
        )
]


traceTestConfigurations.each { testConfiguration ->
    tasks.register("start${testConfiguration.testName}All")
    tasks.register("remove${testConfiguration.testName}All")

    (0..<testConfiguration.containerConfigurations.size()).each { containerIndex ->
        tasks.register("create${testConfiguration.testName}${containerIndex}", DockerCreateContainer) {
            dependsOn testConfiguration.containerConfigurations.get(containerIndex).imageTask
            dependsOn createDataPrepperNetwork
            containerName = "${testConfiguration.containerNamePrefix}-${containerIndex}"
            exposePorts('tcp', [21890])
            hostConfig.portBindings = ["${21890+containerIndex}:21890"]
            hostConfig.binds = [
                    (project.file("src/integrationTest/resources/${testConfiguration.containerConfigurations.get(containerIndex).pipelineConfiguration}").toString())   : '/usr/share/data-prepper/pipelines/trace-pipeline.yaml',
                    (project.file("src/integrationTest/resources/${testConfiguration.containerConfigurations.get(containerIndex).dataPrepperConfiguration}").toString()): '/usr/share/data-prepper/config/data-prepper-config.yaml'
            ]
            hostConfig.network = createDataPrepperNetwork.getNetworkName()
            targetImageId testConfiguration.containerConfigurations.get(containerIndex).imageTask.get().imageId
        }

        tasks.register("start${testConfiguration.testName}${containerIndex}", DockerStartContainer) {
            dependsOn "create${testConfiguration.testName}${containerIndex}"
            dependsOn 'startOpenSearchDockerContainer'
            mustRunAfter 'startOpenSearchDockerContainer'
            targetContainerId tasks.getByName("create${testConfiguration.testName}${containerIndex}").getContainerId()
        }

        tasks.named("start${testConfiguration.testName}All").configure {
            dependsOn "start${testConfiguration.testName}${containerIndex}"
        }

        tasks.register("stop${testConfiguration.testName}${containerIndex}", DockerStopContainer) {
            dependsOn "${testConfiguration.testName}"
            targetContainerId tasks.getByName("create${testConfiguration.testName}${containerIndex}").getContainerId()
        }

        tasks.register("remove${testConfiguration.testName}${containerIndex}", DockerRemoveContainer) {
            dependsOn "stop${testConfiguration.testName}${containerIndex}"
            targetContainerId tasks.getByName("stop${testConfiguration.testName}${containerIndex}").getContainerId()
        }

        tasks.named("remove${testConfiguration.testName}All").configure {
            dependsOn "remove${testConfiguration.testName}${containerIndex}"
        }
    }

    tasks.register(testConfiguration.testName, Test) {
        dependsOn build
        dependsOn startOpenSearchDockerContainer
        dependsOn "start${testConfiguration.testName}All"

        // Wait for Data Prepper image to be ready
        doFirst {
            sleep(15 * 1000)
        }

        description = testConfiguration.description
        group = 'verification'
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath

        filter {
            includeTestsMatching testConfiguration.testFilters
        }

        finalizedBy stopOpenSearchDockerContainer
        finalizedBy "remove${testConfiguration.testName}All"
        finalizedBy removeDataPrepperNetwork
    }
}


dependencies {
    integrationTestImplementation project(':data-prepper-api')
    integrationTestImplementation project(':data-prepper-plugins:common')
    integrationTestImplementation project(':data-prepper-plugins:opensearch')
    integrationTestImplementation project(':data-prepper-plugins:aws-plugin-api')
    integrationTestImplementation project(':data-prepper-plugins:otel-trace-group-processor')
    integrationTestImplementation testLibs.awaitility
    integrationTestImplementation "io.opentelemetry.proto:opentelemetry-proto:${targetOpenTelemetryVersion}"
    integrationTestImplementation libs.protobuf.util
    integrationTestImplementation libs.armeria.core
    integrationTestImplementation libs.armeria.grpc
    integrationTestImplementation libs.opensearch.rhlc
    integrationTestImplementation 'com.fasterxml.jackson.core:jackson-databind'
}
